novato

#include <stdio.h>
#include <string.h>

int main() {
    // Simulação do movimento da Torre (5 casas para a direita)
    printf("Movimento da Torre:\n");
    for (int i = 0; i < 5; i++) {
        printf("Direita\n");
    }
    printf("\n");

    // Simulação do movimento do Bispo (5 casas na diagonal para cima e à direita)
    printf("Movimento do Bispo:\n");
    int j = 0;
    while (j < 5) {
        printf("Cima, Direita\n");
        j++;
    }
    printf("\n");

    // Simulação do movimento da Rainha (8 casas para a esquerda)
    printf("Movimento da Rainha:\n");
    int k = 0;
    do {
        printf("Esquerda\n");
        k++;
    } while (k < 8);
    printf("\n");

    return 0;
}





Médio 
#include <stdio.h>
#include <string.h>

int main() {
    // Simulação do movimento da Torre (5 casas para a direita)
    printf("Movimento da Torre:\n");
    for (int i = 0; i < 5; i++) {
        printf("Direita\n");
    }
    printf("\n");

    // Simulação do movimento do Bispo (5 casas na diagonal para cima e à direita)
    printf("Movimento do Bispo:\n");
    int j = 0;
    while (j < 5) {
        printf("Cima, Direita\n");
        j++;
    }
    printf("\n");

    // Simulação do movimento da Rainha (8 casas para a esquerda)
    printf("Movimento da Rainha:\n");
    int k = 0;
    do {
        printf("Esquerda\n");
        k++;
    } while (k < 8);
    printf("\n");

    // Simulação do movimento do Cavalo (duas casas para baixo e uma para a esquerda)
    printf("Movimento do Cavalo:\n");
    int movimento_vertical = 2;
    int movimento_horizontal = 1;

    // Primeiro loop: movimento vertical (duas casas para baixo)
    for (int i = 0; i < movimento_vertical; i++) {
        printf("Baixo\n");
        // Segundo loop (aninhado): movimento horizontal (uma casa para a esquerda)
        // Este loop executa apenas na última iteração do loop externo
        if (i == movimento_vertical - 1) {
            int l = 0;
            while (l < movimento_horizontal) {
                printf("Esquerda\n");
                l++;
            }
        }
    }
    printf("\n");

    return 0;
}



Mestre

#include <stdio.h>
#include <string.h>

// Função recursiva para simular o movimento da Torre (para a direita)
void moverTorreRecursivo(int casas) {
    if (casas > 0) {
        printf("Direita\n");
        moverTorreRecursivo(casas - 1);
    }
}

// Função recursiva para simular o movimento do Bispo (diagonal para cima e à direita)
void moverBispoRecursivo(int casas) {
    if (casas > 0) {
        printf("Cima, Direita\n");
        moverBispoRecursivo(casas - 1);
    }
}

// Função recursiva para simular o movimento da Rainha (para a esquerda)
void moverRainhaRecursivo(int casas) {
    if (casas > 0) {
        printf("Esquerda\n");
        moverRainhaRecursivo(casas - 1);
    }
}

int main() {
    // Simulação do movimento da Torre (5 casas para a direita) com recursão
    printf("Movimento da Torre (Recursivo):\n");
    moverTorreRecursivo(5);
    printf("\n");

    // Simulação do movimento do Bispo (5 casas na diagonal para cima e à direita) com recursão e loops aninhados
    printf("Movimento do Bispo (Recursivo com Loops Aninhados):\n");
    for (int i = 0; i < 5; i++) { // Loop "vertical" (controla o número de passos)
        for (int j = 0; j < 1; j++) { // Loop "horizontal" (sem efeito real aqui, apenas para aninhamento)
            printf("Cima, Direita\n");
        }
    }
    printf("\n");

    // Simulação do movimento da Rainha (8 casas para a esquerda) com recursão
    printf("Movimento da Rainha (Recursivo):\n");
    moverRainhaRecursivo(8);
    printf("\n");

    // Simulação do movimento do Cavalo (duas casas para cima e uma para a direita) com loops complexos
    printf("Movimento do Cavalo (Loops Complexos):\n");
    for (int cima = 0, direita = 0; cima < 2 || direita < 1;) {
        if (cima < 2) {
            printf("Cima\n");
            cima++;
            continue; // Volta para a próxima iteração do loop externo
        }
        if (direita < 1) {
            printf("Direita\n");
            direita++;
            break;    // Sai do loop assim que o movimento para a direita é completo
        }
    }
    printf("\n");

    return 0;
}