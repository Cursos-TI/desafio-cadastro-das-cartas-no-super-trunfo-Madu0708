Desafio novato



#include <stdio.h>
#include <string.h>

// Define a estrutura de uma carta
struct Carta {
    char nome[50];
    int ataque;
    int defesa;
    int magia;
};

// Função para criar uma carta
struct Carta criar_carta(const char *nome, int ataque, int defesa, int magia) {
    struct Carta nova_carta;
    strcpy(nova_carta.nome, nome);
    nova_carta.ataque = ataque;
    nova_carta.defesa = defesa;
    nova_carta.magia = magia;
    return nova_carta;
}

int main() {
    // Cria duas cartas para comparação
    struct Carta carta1 = criar_carta("Dragão de Fogo", 80, 50, 70);
    struct Carta carta2 = criar_carta("Cavaleiro Ágil", 60, 75, 30);

    // Define o atributo a ser comparado (use números para representar os atributos)
    // 0: nome (string - a comparação seria diferente)
    // 1: ataque
    // 2: defesa
    // 3: magia
    int atributo_comparacao = 1; // Comparando o ataque

    printf("Carta 1: Nome: %s, Ataque: %d, Defesa: %d, Magia: %d\n",
           carta1.nome, carta1.ataque, carta1.defesa, carta1.magia);
    printf("Carta 2: Nome: %s, Ataque: %d, Defesa: %d, Magia: %d\n",
           carta2.nome, carta2.ataque, carta2.defesa, carta2.magia);

    printf("\nComparando o atributo: ");
    if (atributo_comparacao == 1) {
        printf("ataque\n");
        if (carta1.ataque > carta2.ataque) {
            printf("A carta '%s' tem um 'ataque' maior (%d) que a carta '%s' (%d).\n",
                   carta1.nome, carta1.ataque, carta2.nome, carta2.ataque);
        } else if (carta1.ataque < carta2.ataque) {
            printf("A carta '%s' tem um 'ataque' maior (%d) que a carta '%s' (%d).\n",
                   carta2.nome, carta2.ataque, carta1.nome, carta1.ataque);
        } else {
            printf("As cartas '%s' e '%s' têm o mesmo valor de 'ataque' (%d).\n",
                   carta1.nome, carta2.nome, carta1.ataque);
        }
    } else if (atributo_comparacao == 2) {
        printf("defesa\n");
        if (carta1.defesa > carta2.defesa) {
            printf("A carta '%s' tem uma 'defesa' maior (%d) que a carta '%s' (%d).\n",
                   carta1.nome, carta1.defesa, carta2.nome, carta2.defesa);
        } else if (carta1.defesa < carta2.defesa) {
            printf("A carta '%s' tem uma 'defesa' maior (%d) que a carta '%s' (%d).\n",
                   carta2.nome, carta2.defesa, carta1.nome, carta1.defesa);
        } else {
            printf("As cartas '%s' e '%s' têm o mesmo valor de 'defesa' (%d).\n",
                   carta1.nome, carta2.nome, carta1.defesa);
        }
    } else if (atributo_comparacao == 3) {
        printf("magia\n");
        if (carta1.magia > carta2.magia) {
            printf("A carta '%s' tem uma 'magia' maior (%d) que a carta '%s' (%d).\n",
                   carta1.nome, carta1.magia, carta2.nome, carta2.magia);
        } else if (carta1.magia < carta2.magia) {
            printf("A carta '%s' tem uma 'magia' maior (%d) que a carta '%s' (%d).\n",
                   carta2.nome, carta2.magia, carta1.nome, carta1.magia);
        } else {
            printf("As cartas '%s' e '%s' têm o mesmo valor de 'magia' (%d).\n",
                   carta1.nome, carta2.nome, carta1.magia);
        }
    } else {
        printf("Atributo de comparação inválido.\n");
    }

    return 0;
}




Desafio intermediário 

#include <stdio.h>
#include <string.h>
#include <stdlib.h> // Para a função exit()

// Define a estrutura de uma carta (país)
struct Carta {
    char nome[50];
    int populacao;
    float area;
    float pib;
    int pontos_turisticos;
    float densidade_demografica;
};

// Função para criar uma carta (país)
struct Carta criar_carta(const char *nome, int populacao, float area, float pib, int pontos_turisticos) {
    struct Carta nova_carta;
    strcpy(nova_carta.nome, nome);
    nova_carta.populacao = populacao;
    nova_carta.area = area;
    nova_carta.pib = pib;
    nova_carta.pontos_turisticos = pontos_turisticos;
    nova_carta.densidade_demografica = (area > 0) ? (float)populacao / area : 0;
    return nova_carta;
}

// Função para comparar as cartas com base no atributo escolhido
void comparar_cartas(struct Carta carta1, struct Carta carta2, int atributo) {
    printf("\nComparando: %s vs %s\n", carta1.nome, carta2.nome);
    switch (atributo) {
        case 1: // População
            printf("Atributo: População\n");
            printf("%s: %d\n", carta1.nome, carta1.populacao);
            printf("%s: %d\n", carta2.nome, carta2.populacao);
            if (carta1.populacao > carta2.populacao) {
                printf("Vitória de %s!\n", carta1.nome);
            } else if (carta1.populacao < carta2.populacao) {
                printf("Vitória de %s!\n", carta2.nome);
            } else {
                printf("Empate!\n");
            }
            break;
        case 2: // Área
            printf("Atributo: Área\n");
            printf("%s: %.2f km²\n", carta1.nome, carta1.area);
            printf("%s: %.2f km²\n", carta2.nome, carta2.area);
            if (carta1.area > carta2.area) {
                printf("Vitória de %s!\n", carta1.nome);
            } else if (carta1.area < carta2.area) {
                printf("Vitória de %s!\n", carta2.nome);
            } else {
                printf("Empate!\n");
            }
            break;
        case 3: // PIB
            printf("Atributo: PIB\n");
            printf("%s: %.2f trilhões\n", carta1.nome, carta1.pib);
            printf("%s: %.2f trilhões\n", carta2.nome, carta2.pib);
            if (carta1.pib > carta2.pib) {
                printf("Vitória de %s!\n", carta1.nome);
            } else if (carta1.pib < carta2.pib) {
                printf("Vitória de %s!\n", carta2.nome);
            } else {
                printf("Empate!\n");
            }
            break;
        case 4: // Pontos Turísticos
            printf("Atributo: Número de Pontos Turísticos\n");
            printf("%s: %d\n", carta1.nome, carta1.pontos_turisticos);
            printf("%s: %d\n", carta2.nome, carta2.pontos_turisticos);
            if (carta1.pontos_turisticos > carta2.pontos_turisticos) {
                printf("Vitória de %s!\n", carta1.nome);
            } else if (carta1.pontos_turisticos < carta2.pontos_turisticos) {
                printf("Vitória de %s!\n", carta2.nome);
            } else {
                printf("Empate!\n");
            }
            break;
        case 5: // Densidade Demográfica
            printf("Atributo: Densidade Demográfica\n");
            printf("%s: %.2f hab/km²\n", carta1.nome, carta1.densidade_demografica);
            printf("%s: %.2f hab/km²\n", carta2.nome, carta2.densidade_demografica);
            if (carta1.densidade_demografica < carta2.densidade_demografica) {
                printf("Vitória de %s!\n", carta1.nome);
            } else if (carta1.densidade_demografica > carta2.densidade_demografica) {
                printf("Vitória de %s!\n", carta2.nome);
            } else {
                printf("Empate!\n");
            }
            break;
        default:
            printf("Opção inválida!\n");
            break;
    }
}

int main() {
    // Define duas cartas de países (já cadastradas)
    struct Carta brasil = criar_carta("Brasil", 214754993, 8515767.049, 1.92, 67, 0);
    struct Carta canada = criar_carta("Canadá", 38246108, 9984670.00, 1.71, 31, 0);

    int escolha;

    do {
        printf("\n--- Super Trunfo de Países ---\n");
        printf("Escolha o atributo para comparar:\n");
        printf("1 - População\n");
        printf("2 - Área\n");
        printf("3 - PIB (em trilhões de US$)\n");
        printf("4 - Número de Pontos Turísticos\n");
        printf("5 - Densidade Demográfica (hab/km²)\n");
        printf("0 - Sair\n");
        printf("Digite sua escolha: ");
        scanf("%d", &escolha);

        switch (escolha) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                comparar_cartas(brasil, canada, escolha);
                break;
            case 0:

















Desafio Mestre



#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

// Define a estrutura de uma carta (país)
struct Carta {
    char nome[50];
    int populacao;
    float area;
    float pib;
    int pontos_turisticos;
    float densidade_demografica;
};

// Função para criar uma carta (país)
struct Carta criar_carta(const char *nome, int populacao, float area, float pib, int pontos_turisticos) {
    struct Carta nova_carta;
    strcpy(nova_carta.nome, nome);
    nova_carta.populacao = populacao;
    nova_carta.area = area;
    nova_carta.pib = pib;
    nova_carta.pontos_turisticos = pontos_turisticos;
    nova_carta.densidade_demografica = (area > 0) ? (float)populacao / area : 0;
    return nova_carta;
}

// Função para exibir o menu de atributos, excluindo o atributo já escolhido
void exibir_menu_atributos(int atributo_escolhido) {
    printf("\nEscolha o atributo para comparar:\n");
    printf("%s", (atributo_escolhido != 1) ? "1 - População\n" : "");
    printf("%s", (atributo_escolhido != 2) ? "2 - Área\n" : "");
    printf("%s", (atributo_escolhido != 3) ? "3 - PIB (em trilhões de US$)\n" : "");
    printf("%s", (atributo_escolhido != 4) ? "4 - Número de Pontos Turísticos\n" : "");
    printf("%s", (atributo_escolhido != 5) ? "5 - Densidade Demográfica (hab/km²)\n" : "");
    printf("0 - Voltar ao menu principal\n");
    printf("Digite sua escolha: ");
}

// Função para comparar as cartas com base em um atributo e retornar o resultado (1 para carta1 vence, 2 para carta2 vence, 0 para empate)
int comparar_atributo(struct Carta carta1, struct Carta carta2, int atributo) {
    switch (atributo) {
        case 1: return (carta1.populacao > carta2.populacao) ? 1 : (carta1.populacao < carta2.populacao) ? 2 : 0;
        case 2: return (carta1.area > carta2.area) ? 1 : (carta1.area < carta2.area) ? 2 : 0;
        case 3: return (carta1.pib > carta2.pib) ? 1 : (carta1.pib < carta2.pib) ? 2 : 0;
        case 4: return (carta1.pontos_turisticos > carta2.pontos_turisticos) ? 1 : (carta1.pontos_turisticos < carta2.pontos_turisticos) ? 2 : 0;
        case 5: return (carta1.densidade_demografica < carta2.densidade_demografica) ? 1 : (carta1.densidade_demografica > carta2.densidade_demografica) ? 2 : 0;
        default: return -1; // Indica um erro
    }
}

int main() {
    // Define duas cartas de países (já cadastradas)
    struct Carta brasil = criar_carta("Brasil", 214754993, 8515767.049, 1.92, 67);
    struct Carta canada = criar_carta("Canadá", 38246108, 9984670.00, 1.71, 31);

    int escolha1 = -1, escolha2 = -1;
    int resultado1, resultado2;
    int pontuacao_brasil = 0, pontuacao_canada = 0;

    do {
        printf("\n--- Super Trunfo de Países ---\n");
        printf("Escolha dois atributos diferentes para comparar:\n");

        // Escolha do primeiro atributo
        exibir_menu_atributos(-1); // -1 indica que nenhum atributo foi escolhido ainda
        if (scanf("%d", &escolha1) != 1) {
            printf("Entrada inválida. Tente novamente.\n");
            while (getchar() != '\n'); // Limpar o buffer de entrada
            escolha1 = -1;
            continue;
        }

        if (escolha1 == 0) break; // Sair do menu principal
        if (escolha1 < 1 || escolha1 > 5) {
            printf("Opção inválida para o primeiro atributo. Tente novamente.\n");
            escolha1 = -1;
            continue;
        }

        // Escolha do segundo atributo
        exibir_menu_atributos(escolha1); // Passa o primeiro atributo escolhido para excluí-lo do menu
        if (scanf("%d", &escolha2) != 1) {
            printf("Entrada inválida. Tente novamente.\n");
            while (getchar() != '\n'); // Limpar o buffer de entrada
            escolha2 = -1;
            continue;
        }

        if (escolha2 == 0) continue; // Voltar ao menu principal
        if (escolha2 < 1 || escolha2 > 5 || escolha2 == escolha1) {
            printf("Opção inválida para o segundo atributo ou atributo igual ao primeiro. Tente novamente.\n");
            escolha2 = -1;
            continue;
        }

        // Realiza as comparações
        resultado1 = comparar_atributo(brasil, canada, escolha1);
        resultado2 = comparar_atributo(brasil, canada, escolha2);

        // Calcula a pontuação
        pontuacao_brasil = (resultado1 == 1 ? 1 : 0) + (resultado2 == 1 ? 1 : 0);
        pontuacao_canada = (resultado1 == 2 ? 1 : 0) + (resultado2 == 2 ? 1 : 0);

        // Exibe os resultados da rodada
        printf("\n--- Resultado da Comparação ---\n");
        printf("Países: %s vs %s\n", brasil.nome, canada.nome);

        printf("Atributo 1: ");
        switch (escolha1) {
            case 1: printf("População (%d vs %d) - %s venceu\n", brasil.populacao, canada.populacao, ((resultado1 == 1) ? brasil.nome : ((resultado1 == 2) ? canada.nome : "Empate"))); break;
            case 2: printf("Área (%.2f km² vs %.2f km²) - %s venceu\n", brasil.area, canada.area, ((resultado1 == 1) ? brasil.nome : ((resultado1 == 2) ? canada.nome : "Empate"))); break;
            case 3: printf("PIB (%.2f tri vs %.2f tri) - %s venceu\n", brasil.pib, canada.pib, ((resultado1 == 1) ? brasil.nome : ((resultado1 == 2) ? canada.nome : "Empate"))); break;
            case 4: printf("Pontos Turísticos (%d vs %d) - %s venceu\n", brasil.pontos_turisticos, canada.pontos_turisticos, ((resultado1 == 1) ? brasil.nome : ((resultado1 == 2) ? canada.nome : "Empate"))); break;
            case 5: printf("Densidade Demográfica (%.2f hab/km² vs %.2f hab/km²) - %s venceu\n", brasil.densidade_demografica, canada.densidade_demografica, ((resultado1 == 1) ? brasil.nome : ((resultado1 == 2) ? canada.nome : "Empate"))); break;
        }

        printf("Atributo 2: ");
        switch (escolha2) {
            case 1: printf("População (%d vs %d) - %s venceu\n", brasil.populacao, canada.populacao, ((resultado2 == 1) ? brasil.nome : ((resultado2 == 2) ? canada.nome : "Empate"))); break;
            case 2: printf("Área (%.2f km² vs %.2f km²) - %s venceu\n", brasil.area, canada.area, ((resultado2 == 1) ? brasil.nome : ((resultado2 == 2) ? canada.nome : "Empate"))); break;
            case 3: printf("PIB (%.2f tri vs %.2f tri) - %s venceu\n", brasil.pib, canada.pib, ((resultado2 == 1) ? brasil.nome : ((resultado2 == 2) ? canada.nome : "Empate"))); break;
            case 4: printf("Pontos Turísticos (%d vs %d) - %s venceu\n", brasil.pontos_turisticos, canada.pontos_turisticos, ((resultado2 == 1) ? brasil.nome : ((resultado2 == 2) ? canada.nome : "Empate"))); break;
            case 5: printf("Densidade Demográfica (%.2f hab/km² vs %.2f hab/km²) - %s venceu\n", brasil.densidade_demografica, canada.densidade_demografica, ((resultado2 == 1) ? brasil.nome : ((resultado2 == 2) ? canada.nome : "Empate"))); break;
        }

        printf("\n--- Pontuação Final da Rodada ---\n");
        printf("%s: %d ponto(s)\n", brasil.nome, pontuacao_brasil);
        printf("%s: %d ponto(s)\n", canada.nome, pontuacao_canada);

        if (pontuacao_brasil > pontuacao_canada) {
            printf("Vitória da rodada: %s!\n", brasil.nome);
        } else if (pontuacao_brasil < pontuacao_canada) {
            printf("Vitória da rodada: %s!\n", canada.nome);
        } else {
            printf("Empate na rodada!\n");
        }

        escolha1 = -1; // Resetar para a próxima rodada
        escolha2 = -1;

    } while (1); // Loop infinito até o jogador escolher sair (opção 0 no primeiro menu)

    printf("Obrigado por jogar Super Trunfo de Países!\n");

    return 0;
}